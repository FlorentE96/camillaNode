<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=100vw, initial-scale=1.0">
    <link rel="stylesheet" href="css/main.css">
    <title>Document</title>
</head>
<body>
    <div id="sectionMainTitle"><img src="img/icon/equalizer.png" class="icon">Equalizer</div>
    
    <script type="module">
        import PEQline from '/src/PEQLine.js';
        import camillaDSP from "/src/camillaDSP.js";       
        import EQKnob from '/src/knob.js';
        import plot from '/src/eqplot.js';

        window.PEQline = PEQline;
        window.camillaDSP = camillaDSP;                        
        window.EQKnob=EQKnob;
        window.plot=plot;
    </script>

    <script> 
        document.loading=false;        
        document.addEventListener("DOMContentLoaded",equalizerOnLoad);
        const DSP = window.parent.DSP;

        async function equalizerOnLoad() {            
            document.loading=true;
            const PEQ = document.getElementById('PEQ');            
            const ctx = document.getElementById("plotCanvas");
            let config= DSP.config;
            
            /// Basics Controls Section
            const basicControls = document.getElementById('basicControls');

            // Create UI elements
            let vol = new EQKnob("Volume",31);        
            let balance = new EQKnob("Balance",181);
            let crossfeed = new EQKnob("Crossfeed",31);

            crossfeed.knob.instance.offAtDefault=true;
            balance.knob.instance.offAtDefault=true;
            
            basicControls.appendChild(vol.knob);        
            basicControls.appendChild(balance.knob)
            basicControls.appendChild(crossfeed.knob)

            // Load data from DSP
            DSP.sendDSPMessage("GetVolume").then(r=>{            
                let volMarker = r/3*10 + 181;
                vol.setVal(volMarker);            
            });

            // load crossfeed
            let crossfeedVal = await DSP.getCrossfeed() * 20 +331;        
            crossfeed.knob.instance.setVal(crossfeedVal);
            
            // load balance
            let bal = await DSP.getBalance() * 10 +181;
            balance.knob.instance.setVal(bal)

            vol.knob.addEventListener("change",function(e){
                const volume = (this.instance.getVal() -181)/10*3; // 3db change per every tick            
                DSP.sendDSPMessage({"SetVolume":volume})
            })

            balance.knob.addEventListener("change",function(e){
                const bal = (this.instance.getVal() -181)/10*1; // 1db change per every tick            
                DSP.setBalance(bal);
            })

            crossfeed.knob.addEventListener("change",function(e){
                let crossfeedVal = (this.instance.getVal()-331)/20;
                // console.log(crossfeedVal)
                DSP.setCrossfeed(crossfeedVal);
            })


            /// Parametric EQ section
            let line;
            if (config.filters!=null) {
                for (let filterName of Object.keys(config.filters)) {                  
                    if (filterName=="Gain") {
                        line = addLine(PEQ,filterName,PEQ.childNodes[0]);                    
                    } else {
                        line = addLine(PEQ,filterName);                    
                    }
                    // line.instance.update();
                    line.instance.JSONtoValues(config.filters[filterName]);                    
                }
            
                // sortByFreq(PEQ);
                plot(config.filters,ctx);         
            }

            // change loading to false after 100ms to avoud update running multiple times during loading.            
            setInterval(function(){document.loading=false},50);            

            initSpectrum();
        }

        function addLine(parent,filterName,insertBefore) {
            let line = PEQline.addPEQLine(parent,insertBefore);            
            line.setAttribute("filterName",filterName);            
            line.addEventListener("update",peqlineUpdate);            
            line.addEventListener("remove",function(e){peqlineRemove(this)});     
            line.addEventListener("add",function(e){peqlineAdd(this)});  
            return line;   
        }

        function sortByFreq(parent) {            
            let elementArray=[];
            parent.childNodes.forEach(element => {                
                if (element.className=="peqline") {                    
                    elementArray.push(element);                        
                }
                //parent.removeChild(element)
            });

            function compareLines(a,b) {    
                return parseInt(a.instance.getParams().freq) - parseInt(b.instance.getParams().freq);                
            }

            elementArray.sort(compareLines);            
            for (let element of elementArray) {
                console(element.instance.getParams.type);
                parent.appendChild(element);
            }
        }

        async function peqlineUpdate() {                        
            if (document.loading) return;
            const ctx = document.getElementById("plotCanvas")
            let filters = generateFiltersObject();
            console.log(filters)

            plot(filters,ctx);              
            let config = await document.DSP.sendDSPMessage("GetConfigJson");
            // config.filters=filters;       
            
            config.pipeline= document.DSP.updatePipeline(config);                 
            await document.DSP.sendDSPMessage({'SetConfigJson':JSON.stringify(config)});                                                                           
        }

        function generateFiltersObject() {
            let filters={};
            const PEQ = document.getElementById('PEQ');
            PEQ.childNodes.forEach(e=>{
                if (e.className=="peqline") {                                   
                    filters[e.getAttribute("filterName")] = e.instance.valuesToJSON();
                }
            })
            return filters;
        }
    
        function peqlineRemove(peqline) {            
            if (document.loading) return;
            const PEQ = document.getElementById('PEQ');
            PEQ.removeChild(peqline);
            peqline=null;
            peqlineUpdate();
        }

        function peqlineAdd(peqline) {
            const PEQ = document.getElementById('PEQ');
            addLine(PEQ,"NewFilter"+PEQ.children.length+1,peqline)
        }

        const  freq = ['25', '30', '40', '50', '63', '80', '100', '125', '160', '200', '250',
        '315', '400', '500', '630', '800', '1K', '1.2K', '1.6K', '2K', '2.5K',
        '3.1K', '4K', '5K', '6.3K', '8K', '10K', '12K', '16K', '20K']
    
        async function initSpectrum(){          
            // Create bars and boxes
            const spec = document.getElementById("spectrum");   
            const barCount=freq.length-1;
            let bar,box;
            spec.innerHTML='';
            for (i=0;i<=barCount;i++){
                bar = document.createElement("div");
                bar.className='levelbar';
                // bar.classList.add(bar % 2==0)?'left':'right';
                bar.setAttribute('freq',freq[i]);
                hue=180;
                for (j=1;j<40;j++) {
                    box = document.createElement('div');
                    box.className='levelbox';                    
                    box.style="background-color: hsl("+hue+", 30%, 50%);"        
                    hue=hue-10;
                    bar.appendChild(box);
                }

                spec.appendChild(bar);
            }

            // Get the data and update the analyser
            
            setInterval(async function(){
                const spec = document.getElementById("spectrum");
                let r = await DSP.getSpectrumData();                
                
                let i=0, height, hue, boxCount, count;
                spec.childNodes.forEach(e=>{
                    if (e.tagName=="DIV") {                         
                        height = 200 + (2*Math.round(r[i]));  
                        if (height<0) height=0;
                        if (height>200) height=0;     
                        boxCount= Math.round(height/8)-1;
                        hue = -height;
                        // e.style='height: '+height+'px; filter: hue-rotate('+hue+'deg);'   
                        count=0;
                        e.childNodes.forEach(e=>{
                            if (e.tagName=="DIV") {
                                if (count>boxCount) e.style.opacity=0; else e.style.opacity=1;
                                count++
                            }
                        })
                        i=i+2;
                    }                     
                })       
                        

            },100)
        }
    
    </script>
    <input type="button" onclick="DSP.sendDSPMessage('GetConfigJson').then(r=>console.log(r));" value="Show Config">

    <div id="spectrum" class="group">
    </div>

    <%- include('plot.ejs'); %>

    <div class="group" id="basicControls" label="Basic Controls">        
    </div>    
    
    <div class="group" id="PEQ" label="Parametric EQ">         
    </div>    

    
</body>
</html>