<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=100vw, initial-scale=1.0">
    <title>CamillaNode</title>       
    <script src="src/main.js" defer></script>
    <link rel="stylesheet" href="css/main.css">
    <link rel="shortcut icon" href="img/favicon.ico" type="image/x-icon">
</head>
<body id="mainBody">
    <script type="module">
        import camillaDSP from "/src/camillaDSP.js";
        import savedConfigs from "/src/savedConfigs.js";
        import preferences from '/src/preferences.js';

        
        window.camillaDSP= camillaDSP;        
        window.configsObject = new savedConfigs();
        window.preferences = new preferences();

        document.addEventListener('DOMContentLoaded',mainBodyOnLoad);
    </script>

    <script>
        // Import Functions
        function showImport() {
            const mod = document.getElementById("importWindow");
            mod.showModal();            
        }

        function importClick() {
            importFilters(document.getElementById('importText').innerText,window.DSP);
            document.getElementById("importWindow").close();
            document.getElementById("mainframe").src='/equalizer';            
        }

        // Export Functions
        async function exportConfig() {
            let configText = await DSP.convertConfigToText();
            console.log(configText);
            if (DSP.config.title.length>0) title = DSP.config.title; else title="";
            downloadFile("CamillaNode PEQ Export - "+title,configText);
            // window.mainframe.contentWindow._configName
        }
        


        // AutoEQ Functions
        function showAutoEQ() {
            const mod = document.getElementById("modalWindow");
            mod.showModal();            
        }


        // Configuration functions
        function showManageConfigs() {
            const mod = document.getElementById("manageConfigs");
            const configList = document.getElementById("configList")
            const activePage = getActivePage();

            let configsAray = configsObject.loadConfigs(activePage);                       
            // console.log(configsAray);
            loadConfigs(activePage,configList);
            document.getElementById("configName").addEventListener('keyup',function(e){                
                if (e.key=="Enter") saveConfigurationClick();
            })
            mod.showModal();            
        }

        async function saveConfigurationClick() {
            const activePage = getActivePage();
            const configName = document.getElementById("configName");
            const date = new Date();

            if (configName.value.length<3) {
                console.log("ConfigName ",configName.value)
                alert("Configuration name should be at least 3 characters long.");
                return;
            }

            const frameDocument = window.mainframe.contentWindow.document;            

            let data,DSPConfig;
            switch (activePage) {
                case "connections":                    
                    let server = frameDocument.getElementById("server").value;
                    let port = frameDocument.getElementById("port").value;
                    let spectrumPort=frameDocument.getElementById("spectrumPort").value;
                    data={"server":server,"port":port,"spectrumPort":spectrumPort}
                    break;
                case "basic":
                    DSPConfig = await DSP.sendDSPMessage("GetConfigJson");
                    let vol = await DSP.sendDSPMessage("GetVolume");
                    let balance = await DSP.getBalance();
                    let crossfeed = await DSP.getCrossfeed();
                    let filters={}
                    filters.subBass= DSPConfig.filters.subBass;
                    filters.bass= DSPConfig.filters.bass;
                    filters.mids= DSPConfig.filters.mids;
                    filters.upperMids= DSPConfig.filters.upperMids;
                    filters.treble= DSPConfig.filters.treble;                    
                    data={"volume":vol,"balance":balance,"crossfeed":crossfeed,"filters":filters,"mixers":DSPConfig.mixers}                    
                    break;
                case "equalizer":
                    DSPConfig = await DSP.sendDSPMessage("GetConfigJson");
                    data={"title":DSPConfig.title,"filters":DSPConfig.filters,"mixers":DSPConfig.mixers,"pipeline":DSPConfig.pipeline}
                    break;
                case "advanced":
                    break;
                case "room":
                    break;
                case "preferences":
                    break;
            }


            let tmpConfig={"type":activePage,"name":configName.value,"createdDate":date,"data":data}
            console.log(tmpConfig);
            let saved = configsObject.saveConfig(tmpConfig);                        
            console.log(saved)
            if (saved[0]) {
                loadConfigs(activePage,document.getElementById("configList"))
                configName.value="";                
            } else {
                if (saved[1]=="exists") {
                    if (!confirm("A config with that name already exists. Would you like add another one?")) return;
                    saved = configsObject.saveConfig(tmpConfig,true);                        
                    if (saved[0]) {
                        loadConfigs(activePage,document.getElementById("configList"))
                        configName.value="";     
                    }
                };
            }
        }

        async function openConfigurationClick() {         
            
            const activePage = getActivePage();
            const configName = document.getElementById("configName");
            const configId = configName.getAttribute("configId");
            let config = configsObject.getConfigById(configId);
            let data = config.data;
            console.log("Open config",activePage,data)

            switch (activePage) {
                case "connections":          
                    const frameDocument = window.mainframe.contentWindow.document;
                    frameDocument.getElementById("server").value=data.server;
                    frameDocument.getElementById("port").value=data.port;
                    frameDocument.getElementById("spectrumPort").value=data.spectrumPort;
                    break;

                case "basic":                                        
                    await DSP.sendDSPMessage({"SetVolume":data.volume})                    
                    await DSP.setBalance(data.balance);
                    await DSP.setCrossfeed(data.crossfeed);
                    DSPConfig = DSP.config;
                    DSPConfig.filters.subBass= data.filters.subBass;
                    DSPConfig.filters.bass= data.filters.bass;
                    DSPConfig.filters.mids= data.filters.midsass;
                    DSPConfig.filters.upperMids= data.filters.upperMids;
                    DSPConfig.filters.treble= data.filters.treble;                    
                    DSPConfig.mixers=data.mixers;
                    DSPConfig.pipeline=DSP.updatePipeline(DSPConfig);
                    DSPConfig.title="loading from config"
                    await DSP.updateConfig(DSPConfig);                    
                    await window.mainframe.contentWindow.loadData.apply();                    
                    break;

                case "equalizer":                
                    DSPConfig = await DSP.sendDSPMessage("GetConfigJson");                    
                    DSPConfig.filters=data.filters;
                    DSPConfig.mixers=data.mixers;
                    DSPConfig.pipeline=DSP.updatePipeline(DSPConfig);         
                    DSPConfig.title=configName.value;                     
                    await DSP.updateConfig(DSPConfig);                                        
                    window.mainframe.contentWindow.loadFiltersFromConfig.apply();                    
                    break;

                case "advanced":
                    break;
                case "room":
                    break;
                case "preferences":
                    break;

            }

            document.getElementById("manageConfigs").close();
        }
    
        function deleteConfigurationClick() {            
            
            const configName = document.getElementById("configName");
            const configId = configName.getAttribute("configId");
            if (confirm("Are you sure you want to delete configuration?\n\n"+configName.value+"\n")==false) return

            let deleted = configsObject.delete(configId);
            if (deleted) {
                const activePage = getActivePage();
                const configList = document.getElementById("configList");
                configName.setAttribute("configId","");
                loadConfigs(activePage,configList);
            } else {
                alert("Error deleting configuration!")
            }

        }
    
        function loadConfigs(activePage,configList) {
            let configsArray = configsObject.loadConfigs(activePage,true);                        

            // console.log(configsArray);
            configList.innerHTML='';
            document.getElementById("configName").value='';
            let configItemElement;
            configsArray.forEach(e=>{
                configItemElement=document.createElement('div');
                configItemElement.className='config';
                configItemElement.innerText=e.name;
                configItemElement.setAttribute('alt',e.createdDate)
                configItemElement.setAttribute('configId',e.id)
                configItemElement.addEventListener('click',function(e){
                    const configName= document.getElementById("configName");
                    configName.value=this.innerText;
                    configName.setAttribute("configId",this.getAttribute("configId"));
                });

                configItemElement.addEventListener('dblclick',function(e){
                    const configName= document.getElementById("configName");
                    configName.value=this.innerText;
                    configName.setAttribute("configId",this.getAttribute("configId"));
                    openConfigurationClick();
                })
                configList.appendChild(configItemElement);
            })
        }


    </script>

    <header>
        <div id="header" class="section">
            <div id="title">
                <img id="logo" src="img/icon.jpg" alt="" style="height: 50px; margin:10px;">
                <span>CamillaNode</span>
            </div>             
        </div>    
        <div id="indicators">
            <div class="indicator indicator-on" id="samplingRateInd">41,400</div>
            <div class="indicator indicator-on" id="uzilizationInd">20%</div>
            <div class="indicator" id="clippingInd">No Clipping</div>
            <div class="indicator" id="limiterInd">Limiter Off</div>
            <div class="indicator" id="balanceInd">0 Center</div>
            <div class="indicator" id="crossfeedInd">0dB</div>
            <div class="indicator" id="filtersInd">12 filters</div>
            <div class="indicator" id="spectrumInd">Spectrum On</div>
            <div class="indicator" id="DSPstateInd">Running</div>
            <div class="indicator" id="DSPversionInd">DSP : 2.0.3</div>
            <div class="indicator" id="nodeVersionInd">Node : 2.0.12</div>            
        </div>
        <div id="version" class="smallInfo"></div> 
        <div class="smallInfo">CamillaNode Version 2.0.1</div> 
        <div id="status" class="smallInfo"></div>
    </header>

    <main>
        
        <section id="sectionLeft">

            <span class="leftTitle">Navigation</span>
            <div class="navigate" target="/connections"><img src="img/icon/connections.png" class="icon">Connections</div>
            <div class="navigate" target="/basic"><img src="img/icon/basic.png" class="icon">Basic</div>
            <div class="navigate" target="/equalizer"><img src="img/icon/equalizer.png" class="icon">Equalizer</div>
            <div class="navigate" target="/advanced"><img src="img/icon/advanced.png" class="icon">Advanced</div>
            <div class="navigate" target="/room"><img src="img/icon/room.png" class="icon">Room EQ</div>
            <div class="navigate" target="/preferences"><img src="img/icon/preferences.png" class="icon">Preferences</div>            
            <br>

            
            <div class="leftTitle">Tools</div>
            
            <div class="navigate" onclick="showImport()"  target=""><img src="img/icon/import.png" class="icon">Import</div>
            <div class="navigate" onclick="exportConfig()"  target=""><img src="img/icon/export.png" class="icon">Export</div>
            <div class="navigate" onclick="showAutoEQ()" target=""><img src="img/icon/connections.png" class="icon">Auto EQ</div>
        
       
            <div class="leftTitle">Configurations</div>
                <!-- <div style="margin-top:10px"><span>Current</span><input style="margin-left:10px" type="text" value="untitled"></div> -->
                <!-- <div class="navigate" onclick="showSave()" target=""><img src="img/icon/save.png" class="icon">Save</div>
                <div class="navigate" onclick="showOpen()" target=""><img src="img/icon/open.png" class="icon">Open</div>
                <div class="navigate" onclick="" target=""><img src="img/icon/delete.png" class="icon">Delete</div> -->
                <div class="navigate" onclick="showManageConfigs()" target=""><img src="img/icon/manageconfig.png" class="icon">Manage Configurations</div>

            <div class="leftTitle">Actions</div>
            <div id="eqTools">
                <div id="basicTools" class="tools">
                    <div class="navigate" onclick="" target=""><img src="img/icon/reset.png" class="icon">Reset</div>
                </div>                
                <div id="equalizerTools" class="tools" >
                    <div class="navigate" onclick="window.mainframe.contentWindow.sortAll.apply()" target=""><img src="img/icon/sort.png" class="icon">Sort</div>
                    <div class="navigate" onclick="" target=""><img src="img/icon/reset.png" class="icon">Reset</div>
                    <div class="navigate" onclick="window.mainframe.contentWindow.clearPEQ.apply()" target=""><img src="img/icon/delete.png" class="icon">Clear</div>
                    <div class="navigate" onclick="" target=""><img src="img/icon/add.png" class="icon">Add New</div>        
                </div>
                <div id="advancedTools" class="tools">

                </div>
            </div>


        </section>

        <section id="sectionMain">                        
            <iframe id="mainframe" src="/preferences" frameborder="0"></iframe>
        </section>
        
    </main>

    
    <dialog id="modalWindow">
        <div class="navigate" onclick="this.parentElement.close()" target=""><img src="img/icon/remove.png" class="icon">Close</div>   
    </dialog>


    <dialog id="importWindow">        
        <p>Import EQ settings from a text file. Please paste the text to import below.</p>          
        <div id="importText" contenteditable="true"></div>
        <div class="navigate" onclick="importClick()" target=""><img src="img/icon/import.png" class="icon">Import</div>   
        <div class="navigate" onclick="this.parentElement.close()" target=""><img src="img/icon/remove.png" class="icon">Close</div> 
    </dialog>


    <dialog id="manageConfigs">        
        <span>Name : </span><input type="text" name="" id="configName"><br>        
        <div id="configList">                        
        </div>
        <div class="navigate" onclick="openConfigurationClick()" target=""><img src="img/icon/open.png" class="icon">Open</div>               
        <div class="navigate" onclick="saveConfigurationClick()" target=""><img src="img/icon/save.png" class="icon">Save</div>               
        <div class="navigate" onclick="deleteConfigurationClick()" target=""><img src="img/icon/delete.png" class="icon">Delete</div>               
        <div class="navigate" onclick="this.parentElement.close()" target=""><img src="img/icon/remove.png" class="icon">Close</div>   
    </dialog>

    

</body>
</html>


<!-- 
Revolve
NTF0424S4H8VWRU8  -->
