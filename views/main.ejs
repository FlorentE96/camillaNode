<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=100vw, initial-scale=1.0">
    <title>CamillaNode</title>       
    <script src="src/main.js" defer></script>
    <link rel="stylesheet" href="css/main.css">
    <link rel="shortcut icon" href="img/favicon.ico" type="image/x-icon">
</head>
<body id="mainBody">

    <script type="module">
        import camillaDSP from "/src/camillaDSP.js";
        
        // Connect to camillaDSP
        const DSP = new camillaDSP();
        let connected =await DSP.connect()
        window.DSP=DSP;

        let version = document.getElementById('version')
        DSP.sendDSPMessage("GetVersion").then(r=>version.innerText="CamillaDSP Version "+r);

        let status = document.getElementById('status')            
        DSP.sendDSPMessage("GetState").then(r=>status.innerText=r);    
        

        setInterval(async ()=>{
            let status = document.getElementById('status')            
            DSP.sendDSPMessage("GetState").then(r=>status.innerText=r);                        
        },5000);

        document.frame = document.getElementById("mainframe");

    </script>

    <script>
        function showImport() {
            const mod = document.getElementById("importWindow");
            mod.showModal();            
        }

        function showExport() {
            const mod = document.getElementById("modalWindow");
            mod.showModal();            
        }

        function showAutoEQ() {
            const mod = document.getElementById("modalWindow");
            mod.showModal();            

        }

        function importClick() {
            importFilters(document.getElementById('importText').innerText,window.DSP);
            document.getElementById("importWindow").close();
            document.getElementById("mainframe").src='/equalizer';            
        }

        function showSave() {
            const activePage = getActivePage();
            console.log(activePage)

            let savedConfigs = window.localStorage.getItem("savedConfigs"); 
            if (savedConfigs==null) savedConfigs=[]; else savedConfigs=JSON.parse(savedConfigs);
            let configs = savedConfigs.filter(e=>e.type==activePage)
            console.log(configs)

            const configList = document.getElementById("configList");
            configList.innerHTML='';
            for (let i=0;i<configs.length;i++) {
                let config = document.createElement("div");
                config.className="config";
                config.innerText=configs[i].name;
                configList.appendChild(config);
            }            
            document.getElementById("saveWindow").showModal();
        }

        function showOpen() {
            const activePage = getActivePage();
            console.log(activePage)

            let savedConfigs = window.localStorage.getItem("savedConfigs"); 
            if (savedConfigs==null) savedConfigs=[]; else savedConfigs=JSON.parse(savedConfigs);
            let configs = savedConfigs.filter(e=>e.type==activePage)
            console.log(configs)

            const configList = document.getElementById("openConfigList");
            configList.innerHTML='';
            for (let i=0;i<configs.length;i++) {
                let config = document.createElement("div");
                config.className="config";
                config.innerText=configs[i].name;
                config.addEventListener("click",function(){document.getElementById("selectedConfig").value=this.innerText})
                configList.appendChild(config);
                
            }            
            document.getElementById("openWindow").showModal();
        }

        async function saveClick() {
            const activePage = getActivePage();
            const configName = document.getElementById("configName").value;
            const date = new Date();


            let savedConfigs = window.localStorage.getItem("savedConfigs"); 
            if (savedConfigs==null) savedConfigs=[]; else savedConfigs=JSON.parse(savedConfigs);
            let data,DSPConfig;

            switch (activePage) {
                case "connections":
                    data={"server":document.getElementById("server").value,"port":document.getElementById("port").value,"spectrumPort":document.getElementById("spectrumPort").value}
                    break;
                case "basic":
                    DSPConfig = await DSP.sendDSPMessage("GetConfigJson");
                    data={"filters":DSPConfig.filters,"mixers":DSPConfig.mixers,"pipeline":DSPConfig.pipeline}
                    break;
                case "equalizer":
                    DSPConfig = await DSP.sendDSPMessage("GetConfigJson");
                    data={"filters":DSPConfig.filters,"mixers":DSPConfig.mixers,"pipeline":DSPConfig.pipeline}
                    break;
                case "advanced":
                    break;
                case "room":
                    break;
                case "preferences":
                    break;

            }


            let tmpConfig={"type":activePage,"name":configName,"createdDate":date,"data":data}
            savedConfigs.s

            savedConfigs.push(tmpConfig);
            console.log(tmpConfig)
            window.localStorage.setItem("savedConfigs",JSON.stringify(savedConfigs));
        }

        async function openClick() {
            const name = document.getElementById("selectedConfig").value;
            let savedConfigs = window.localStorage.getItem("savedConfigs"); 
            if (savedConfigs==null) savedConfigs=[]; else savedConfigs=JSON.parse(savedConfigs);
            let tConfig = savedConfigs.find(e=>e.name==name)
            console.log(tConfig);
            const activePage = getActivePage();

            switch (activePage) {
                case "connections":            
                    break;
                case "basic":
                    
                    
                    break;
                case "equalizer":
                    DSPConfig = await DSP.sendDSPMessage("GetConfigJson");
                    DSPConfig.filters=tConfig.data.filters;
                    DSPConfig.filters=tConfig.data.mixers;
                    DSPConfig.filters=tConfig.data.pipeline;
                    console.log("DSP Config",DSPConfig);
                    await DSP.sendDSPMessage({'SetConfigJson':JSON.stringify(DSPConfig)});
                    
                    break;
                case "advanced":
                    break;
                case "room":
                    break;
                case "preferences":
                    break;

            }
        }
    </script>

    <header>
        <div id="header" class="section">
            <div id="title">
                <img src="img/icon.jpg" alt="" style="height: 50px; margin:10px">
                <span>CamillaNode</span>
            </div>             
        </div>    
        <div id="version" class="smallInfo"></div> 
        <div class="smallInfo">CamillaNode Version 2.0.1</div> 
        <div id="status" class="smallInfo"></div>
    </header>

    <main>
        
        <section id="sectionLeft">

            <span class="leftTitle">Navigation</span>
            <div class="navigate" target="/connections"><img src="img/icon/connections.png" class="icon">Connections</div>
            <div class="navigate" target="/basic"><img src="img/icon/basic.png" class="icon">Basic</div>
            <div class="navigate" target="/equalizer"><img src="img/icon/equalizer.png" class="icon">Equalizer</div>
            <div class="navigate" target="/advanced"><img src="img/icon/advanced.png" class="icon">Advanced</div>
            <div class="navigate" target="/room"><img src="img/icon/room.png" class="icon">Room EQ</div>
            <div class="navigate" target="/preferences"><img src="img/icon/preferences.png" class="icon">Preferences</div>            
            <br>

            
            <div class="leftTitle">Tools</div>
            <div id="default">
                <div class="navigate" onclick="showImport()"  target=""><img src="img/icon/import.png" class="icon">Import</div>
                <div class="navigate" onclick="showExport()"  target=""><img src="img/icon/export.png" class="icon">Export</div>
                <div class="navigate" onclick="showAutoEQ()" target=""><img src="img/icon/connections.png" class="icon">Auto EQ</div>
            </div>            
            <div id="eqTool" style="display: none;">
                <div class="navigate" onclick="" target=""><img src="img/icon/connections.png" class="icon">Add Filter</div>
                <div class="navigate" onclick="" target=""><img src="img/icon/connections.png" class="icon">Reset</div>
            </div>

            
            <br>
            
            <div class="leftTitle">Configurations</div>
            <!-- <div style="margin-top:10px"><span>Current</span><input style="margin-left:10px" type="text" value="untitled"></div> -->
            <div class="navigate" onclick="showSave()" target=""><img src="img/icon/save.png" class="icon">Save</div>
            <div class="navigate" onclick="showOpen()" target=""><img src="img/icon/open.png" class="icon">Open</div>
            <div class="navigate" onclick="" target=""><img src="img/icon/delete.png" class="icon">Delete</div>
            
        </section>

        <section id="sectionMain">                        
            <iframe id="mainframe" src="/connections" frameborder="0"></iframe>
        </section>
        
    </main>

    
    <dialog id="modalWindow">
        <div class="navigate" onclick="this.parentElement.close()" target=""><img src="img/icon/remove.png" class="icon">Close</div>   
    </dialog>


    <dialog id="importWindow">        
        <p>Import EQ settings from a text file. Please paste the text to import below.</p>          
        <div id="importText" contenteditable="true"></div>        
        <div class="navigate" onclick="importClick()" target=""><img src="img/icon/import.png" class="icon">Import</div>   
        <div class="navigate" onclick="this.parentElement.close()" target=""><img src="img/icon/remove.png" class="icon">Close</div> 
    </dialog>


    <dialog id="saveWindow">        
        <span>Save As : </span><input type="text" name="" id="configName"><br>
        <div id="configList">            
        </div>

        <div class="navigate" onclick="saveClick()" target=""><img src="img/icon/save.png" class="icon">Save</div>               
        <div class="navigate" onclick="this.parentElement.close()" target=""><img src="img/icon/remove.png" class="icon">Close</div>   
    </dialog>


    
    <dialog id="openWindow" class="dialogueWindow">        
        <p>Select configuration to load. Cancel to close without loading.</p>
        <div id="openConfigList">            
        </div>

        <div class="navigate" onclick="openClick()" target=""><img src="img/icon/open.png" class="icon">Open</div>               
        <div class="navigate" onclick="this.parentElement.close()" target=""><img src="img/icon/remove.png" class="icon">Close</div>   
        <input type="text" id="selectedConfig" value="">
    </dialog>


</body>
</html>


<!-- 
Revolve
NTF0424S4H8VWRU8  -->
