<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=100vw, initial-scale=1.0">
    <title>CamillaDSP</title>
    <script src="camillaControl.js"></script>
    <link rel="stylesheet" href="main.css">
</head>
<body>

<%- include('header.ejs'); %>

<div class="section" id="settings">    
</div>

<script>
    let preferencesString = window.localStorage.getItem('preferences');
    if (preferencesString==undefined) preferences = loadDefaultPreferences(); else preferences =JSON.parse(preferencesString);
    window.localStorage.setItem('preferences',JSON.stringify(preferences));
    //console.log(preferences)

    let settingsElement = document.getElementById('settings');

    let legend = preferences.legend;
    for (let group of Object.keys(legend)) {
        groupTitleElement = document.createElement('div');
        groupTitleElement.innerText=legend[group];
        groupTitleElement.className='settingsGroup';
        
        for (let item of Object.keys(preferences[group])) {
            let itemElement;
            let itemTitle = document.createElement('p');            
            itemTitle.innerText=preferences[group][item].title;

            switch (preferences[group][item].params.format) {
                case "boolean":
                    itemElement = document.createElement("input")
                    itemElement.type="checkbox";
                    break;
                case "range":
                    itemElement = document.createElement("input")
                    itemElement.type="range";
                    itemElement.min = preferences[group][item].params.min;
                    itemElement.max = preferences[group][item].params.max;
                    itemElement.value = preferences[group][item].value

                    break;            
            }
            groupTitleElement.appendChild(itemTitle);
            groupTitleElement.appendChild(itemElement);
            console.log(group+":"+item+":"+preferences[group][item].params.format)
        }

        settingsElement.appendChild(groupTitleElement);
        settingsElement.appendChild(document.createElement('hr'))
    }

    function loadDefaultPreferences() {
        let legend = {"display":"Display Settings","general":"General Settings","equalizer":"Equalizer Settings"}
        let display = {
            "backgroundHue":{"title":"Page background color","value":170,"params":{"format":"range","min":0,"max":360}},
            "EQSectionbackgroundHue":{"title":"EQ section backgroun hue","value":210,"params":{"format":"range","min":0,"max":360}},
            "hueRotate" : {"title":"Change EQ Band color with chaning gain","value":true,"params":{"format":"boolean"}},
            "eqparamFontSize": {"title":"Change EQ Band color with chaning gain","value":true,"params":{"format":"boolean"}}
        }

        let general = {
            "messageboxDefaultTimeOut":{"title":"Message box default timeout duration","value":1500,"params":{"format":"range","min":500,"max":3000}},

        }
        let equalizer = { 
            "MaxDB":{"title":"Maximum gain in db","value":16,"params":{"format":"range","min":6,"max":30}},
            "MaxBands" : {"title":"Maximum number of EQ bands","value":24,"params":{"format":"range","min":6,"max":36}},
            "showLevelBars" :{"title":"Show level bars","value":true,"params":{"format":"boolean"}},      
            "autoUpload":{"title":"Automatically upload changes to DSP","value":false,"params":{"format":"boolean"}},
            "autoDownload":{"title":"Download loaded config from DSP at startup","value":true,"params":{"format":"boolean"}},            
        }
        return {"legend":legend,"display":display,"general":general,"equalizer":equalizer}
    }


    
</script>